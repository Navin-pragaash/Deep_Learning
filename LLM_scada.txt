import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
import joblib
import openai
import gradio as gr

# Load dataset from Google Drive (replace with correct path)
df = pd.read_csv('/content/drive/MyDrive/T1.csv')
df['Date/Time'] = pd.to_datetime(df['Date/Time'])
df.set_index('Date/Time', inplace=True)

# Feature Selection & Scaling
features = ['LV ActivePower (kW)', 'Wind Speed (m/s)', 'Wind Direction (¬∞)']
scaler = MinMaxScaler()
df_scaled = scaler.fit_transform(df[features])
joblib.dump(scaler, 'scaler.pkl')

# Prepare Data for Model
sequence_length = 10
X, y = [], []
for i in range(len(df_scaled) - sequence_length):
    X.append(df_scaled[i:i+sequence_length])
    y.append(df_scaled[i+sequence_length, 0])  # Predicting Power Output
X, y = np.array(X), np.array(y)

# Train LSTM Model
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X.shape[1], X.shape[2])),
    Dropout(0.2),
    LSTM(50),
    Dropout(0.2),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
model.fit(X, y, epochs=10, batch_size=32, validation_split=0.2)
model.save('/content/predictive_model.h5')

# Load GPT-4 API Key
openai.api_key = "your_gpt4_api_key_here"

# **Prediction Function for GUI**
def predict_maintenance(sensor_data):
    sensor_data = np.array(sensor_data).reshape(1, sequence_length, len(features))
    model = load_model('/content/predictive_model.h5')
    prediction = model.predict(sensor_data)
    return f"Predicted Power Output: {prediction[0][0]:.2f} kW"

# **GPT-4 Chatbot Function for GUI**
def chat_with_gpt(user_message):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "You are an AI assistant for predictive maintenance in industrial SCADA systems."},
                  {"role": "user", "content": user_message}]
    )
    return response['choices'][0]['message']['content']

# **Build Gradio UI**
with gr.Blocks() as gui:
    gr.Markdown("## **SCADA-Based Predictive Maintenance System** üöÄ")

    # Prediction Section
    gr.Markdown("### üîç **Predict Maintenance Needs**")
    sensor_input = gr.Textbox(label="Enter last 10 sensor readings as comma-separated values")
    predict_button = gr.Button("Predict")
    prediction_output = gr.Textbox(label="Prediction Result")

    # Chatbot Section
    gr.Markdown("### üí¨ **Ask GPT-4 About Maintenance Issues**")
    user_input = gr.Textbox(label="Ask your question")
    chat_button = gr.Button("Ask")
    chat_output = gr.Textbox(label="Chatbot Response")

    # Linking Functions
    predict_button.click(fn=predict_maintenance, inputs=[sensor_input], outputs=[prediction_output])
    chat_button.click(fn=chat_with_gpt, inputs=[user_input], outputs=[chat_output])

# **Launch GUI Inside Google Colab**
gui.launch(share=False, debug=True)
